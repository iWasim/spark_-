import pandas as pd
from faker import Faker
import random
from datetime import datetime, timedelta
import os

# Initialize Faker
fake = Faker()

# Function to create synthetic data for SensorDetails
def create_sensor_details(num_entries, num_devices):
    data = []
    for _ in range(num_entries):
        sensor_id = _  # Assuming SensorID is sequential
        sensor_name = (fake.word().capitalize() + " Sensor")[:24]  # Random sensor name, max 24 chars
        sensor_type = random.choice(['Temperature', 'Pressure', 'Humidity', 'Proximity', 'Light'])[:24]  # Random sensor type
        manufacturer = fake.company()[:24]  # Random manufacturer, max 24 chars
        model_number = fake.word()[:24]  # Random model number, max 24 chars
        serial_number = fake.uuid4()  # Random serial number (UUID)
        
        installation_date = fake.date_time_this_decade()  # Random installation date
        calibration_date = installation_date + timedelta(days=random.randint(30, 365))  # Random calibration date
        status = random.choice(['Active', 'Inactive', 'Under Maintenance'])[:14]  # Random status, max 14 chars
        location = fake.city()[:24]  # Random location, max 24 chars
        measurement_range = f"{random.randint(0, 100)}-{random.randint(101, 200)}"  # Random measurement range
        accuracy = f"{random.uniform(0.1, 5.0):.2f}%"  # Random accuracy percentage
        resolution = f"{random.randint(1, 10)} units"  # Random resolution
        data_frequency = random.choice(['1s', '5s', '10s', '30s', '1m'])  # Random data frequency
        power_source = random.choice(['Battery', 'AC', 'Solar'])[:24]  # Random power source, max 24 chars
        communication_protocol = random.choice(['WiFi', 'Bluetooth', 'Zigbee', 'LoRa'])[:24]  # Random communication protocol, max 24 chars
        cost = round(random.uniform(10, 1000), 2)  # Random cost
        supplier = fake.company()[:24]  # Random supplier, max 24 chars
        additional_details = fake.text(max_nb_chars=500)[:999]  # Random additional details, max 999 chars
        created_datetime = datetime.now()  # Current datetime for created
        modified_datetime = created_datetime  # Same for modified
        created_by = fake.name()[:24]  # Random creator name, max 24 chars
        modified_by = fake.name()[:24]  # Random modifier name, max 24 chars
        is_active = random.choice([True, False])  # Random active status
        
        # Randomly select a DeviceID from the previously generated devices
        device_id = random.randint(1, num_devices)

        # Append the synthetic entry to the data list
        data.append([
            sensor_id, sensor_name, sensor_type, manufacturer, model_number,
            serial_number, installation_date, calibration_date,
            status, location, measurement_range, accuracy,
            resolution, data_frequency, power_source,
            communication_protocol, cost, supplier,
            additional_details, created_datetime, modified_datetime,
            created_by, modified_by, is_active, device_id
        ])

    # Create a DataFrame
    columns = [
        "SensorID", "SensorName", "SensorType", "Manufacturer", "ModelNumber",
        "SerialNumber", "InstallationDate", "CalibrationDate",
        "Status", "Location", "MeasurementRange", "Accuracy",
        "Resolution", "DataFrequency", "PowerSource",
        "CommunicationProtocol", "Cost", "Supplier", "AdditionalDetails",
        "CreatedDateTime", "ModifiedDateTime", "CreatedBy", "ModifiedBy", "IsActive", "DeviceID"
    ]
    
    df = pd.DataFrame(data, columns=columns)
    return df

# Function to create synthetic data for MaintenanceDetails
def create_maintenance_details(num_entries, num_devices, num_technicians):
    data = []
    for _ in range(num_entries):
        maintenance_id = _  # Assuming MaintenanceID is sequential
        start_time = fake.date_time_this_decade()  # Random start time
        maintenance_type = random.choice(['Routine', 'Repair', 'Inspection'])[:24]  # Random maintenance type
        technician_id = random.randint(1, num_technicians)  # Random technician ID
        status = random.choice(['Completed', 'Pending', 'In Progress'])[:14]  # Random status, max 14 chars
        duration = f"{random.randint(1, 8)} hours"  # Random duration
        cost = round(random.uniform(100, 1000), 2)  # Random cost
        location = fake.city()[:24]  # Random location, max 24 chars
        description = fake.text(max_nb_chars=500)[:999]  # Random description, max 999 chars
        parts_used = fake.word()[:24]  # Random parts used, max 24 chars
        next_scheduled_maintenance = start_time + timedelta(days=random.randint(30, 180))  # Random next scheduled maintenance
        additional_details = fake.text(max_nb_chars=500)[:999]  # Random additional details, max 999 chars
        parts_replaced = fake.word()[:24]  # Random parts replaced, max 24 chars
        parts_repaired = fake.word()[:24]  # Random parts repaired, max 24 chars
        maintenance_outcome = random.choice(['Successful', 'Failed'])[:14]  # Random outcome, max 14 chars
        error_codes = fake.word()[:24]  # Random error codes, max 24 chars
        priority_level = random.choice(['Low', 'Medium', 'High'])[:14]  # Random priority level, max 14 chars
        created_datetime = datetime.now()  # Current datetime for created
        modified_datetime = created_datetime  # Same for modified
        created_by = fake.name()[:24]  # Random creator name, max 24 chars
        modified_by = fake.name()[:24]  # Random modifier name, max 24 chars
        is_active = random.choice([True, False])  # Random active status
        device_id = random.randint(1, num_devices)  # Random DeviceID

        # Append the synthetic entry to the data list
        data.append([
            maintenance_id, start_time, maintenance_type, technician_id,
            status, duration, cost, location, description, parts_used,
            next_scheduled_maintenance, additional_details, parts_replaced,
            parts_repaired, maintenance_outcome, error_codes, priority_level,
            created_datetime, modified_datetime, created_by, modified_by,
            is_active, device_id
        ])

    # Create a DataFrame
    columns = [
        "MaintenanceID", "StartTimeStamp", "MaintenanceType", "TechnicianID",
        "Status", "Duration", "Cost", "Location", "Description", "PartsUsed",
        "NextScheduledMaintenance", "AdditionalDetails", "PartsReplaced",
        "PartsRepaired", "MaintenanceOutCome", "ErrorCodes", "PriorityLevel",
        "CreatedDateTime", "ModifiedDateTime", "CreatedBy", "ModifiedBy", "IsActive", "DeviceID"
    ]
    
    df = pd.DataFrame(data, columns=columns)
    return df

# Function to create synthetic data for MaintenanceScheduleDetails
def create_maintenance_schedule_details(num_entries, num_devices, num_technicians):
    data = []
    for _ in range(num_entries):
        schedule_id = _  # Assuming ScheduleID is sequential
        scheduled_date = fake.date_time_this_decade()  # Random scheduled date
        maintenance_type = random.choice(['Routine', 'Repair', 'Inspection'])[:24]  # Random maintenance type
        technician_id = random.randint(1, num_technicians)  # Random technician ID
        status = random.choice(['Scheduled', 'Completed', 'Cancelled'])[:14]  # Random status, max 14 chars
        duration = f"{random.randint(1, 8)} hours"  # Random duration
        priority = random.choice(['Low', 'Medium', 'High'])[:14]  # Random priority, max 14 chars
        location = fake.city()[:24]  # Random location, max 24 chars
        description = fake.text(max_nb_chars=500)[:999]  # Random description, max 999 chars
        parts_required = fake.word()[:24]  # Random parts required, max 24 chars
        comments = fake.text(max_nb_chars=500)[:999]  # Random comments, max 999 chars
        additional_details = fake.text(max_nb_chars=500)[:999]  # Random additional details, max 999 chars
        created_by = fake.name()[:24]  # Random creator name, max 24 chars
        created_timestamp = datetime.now()  # Current datetime for created
        modified_by = fake.name()[:24]  # Random modifier name, max 24 chars
        modified_timestamp = created_timestamp  # Same for modified
        is_active = random.choice([True, False])  # Random active status
        device_id = random.randint(1, num_devices)  # Random DeviceID

        # Append the synthetic entry to the data list
        data.append([
            schedule_id, scheduled_date, maintenance_type, technician_id,
            status, duration, priority, location, description, parts_required,
            comments, additional_details, created_by, created_timestamp,
            modified_by, modified_timestamp, is_active, device_id
        ])

    # Create a DataFrame
    columns = [
        "ScheduleID", "ScheduledDate", "MaintenanceType", "TechnicianID",
        "Status", "Duration", "Priority", "Location", "Description", "PartsRequired",
        "Comments", "AdditionalDetails", "CreatedBy", "CreatedTimeStamp",
        "ModifiedBy", "ModifiedTimestamp", "IsActive", "DeviceID"
    ]
    
    df = pd.DataFrame(data, columns=columns)
    return df

# Function to create synthetic data for DeviceOperationDetails
def create_device_operation_details(num_entries, num_devices):
    data = []
    for _ in range(num_entries):
        operation_id = _  # Assuming OperationID is sequential
        timestamp = fake.date_time_this_decade()  # Random timestamp
        health = random.choice(['Good', 'Fair', 'Poor'])[:24]  # Random health status, max 24 chars
        battery_level = f"{random.randint(0, 100)}%"  # Random battery level
        signal_strength = f"{random.randint(-100, 0)} dBm"  # Random signal strength
        last_communication = fake.date_time_this_decade()  # Random last communication time
        firmware_version = f"v{random.randint(1, 5)}.{random.randint(0, 9)}.{random.randint(0, 9)}"  # Random firmware version
        location = fake.city()[:24]  # Random location, max 24 chars
        temperature = f"{random.uniform(-20, 50):.2f}°C"  # Random temperature
        error_codes = fake.word()[:24]  # Random error codes, max 24 chars
        uptime = f"{random.randint(1, 100)} hours"  # Random uptime
        additional_details = fake.text(max_nb_chars=500)[:999]  # Random additional details, max 999 chars
        created_datetime = datetime.now()  # Current datetime for created
        modified_datetime = created_datetime  # Same for modified
        created_by = fake.name()[:24]  # Random creator name, max 24 chars
        modified_by = fake.name()[:24]  # Random modifier name, max 24 chars
        is_active = random.choice([True, False])  # Random active status
        device_id = random.randint(1, num_devices)  # Random DeviceID

        # Append the synthetic entry to the data list
        data.append([
            operation_id, timestamp, health, battery_level,
            signal_strength, last_communication, firmware_version,
            location, temperature, error_codes, uptime,
            additional_details, created_datetime, modified_datetime,
            created_by, modified_by, is_active, device_id
        ])

    # Create a DataFrame
    columns = [
        "OperationID", "Timestamp", "Health", "BatteryLevel",
        "SignalStrength", "LastCommunication", "FirmwareVersion",
        "Location", "Temperature", "ErrorCodes", "Uptime",
        "AdditionalDetails", "CreatedDateTime", "ModifiedDateTime",
        "CreatedBy", "ModifiedBy", "IsActive", "DeviceID"
    ]
    
    df = pd.DataFrame(data, columns=columns)
    return df

# Generate synthetic data
num_entries = 1000  # Specify the number of entries you want for each table
num_devices = 10  # Specify how many devices exist in DeviceDetails
num_technicians = 5  # Specify how many technicians exist

# Create data for each table
sensor_details_data = create_sensor_details(num_entries, num_devices)
maintenance_details_data = create_maintenance_details(num_entries, num_devices, num_technicians)
maintenance_schedule_details_data = create_maintenance_schedule_details(num_entries, num_devices, num_technicians)
device_operation_details_data = create_device_operation_details(num_entries, num_devices)

# Specify the directory where you want to save the files
directory = r"C:\path\to\your\directory"  # Change this to your desired path

# Save to CSV
sensor_details_filename = os.path.join(directory, f'sensor_details_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
maintenance_details_filename = os.path.join(directory, f'maintenance_details_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
maintenance_schedule_details_filename = os.path.join(directory, f'maintenance_schedule_details_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
device_operation_details_filename = os.path.join(directory, f'device_operation_details_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')

sensor_details_data.to_csv(sensor_details_filename, index=False)
maintenance_details_data.to_csv(maintenance_details_filename, index=False)
maintenance_schedule_details_data.to_csv(maintenance_schedule_details_filename, index=False)
device_operation_details_data.to_csv(device_operation_details_filename, index=False)

# Print confirmation
print(f"Generated {num_entries} records for each table.")
print(f"Data saved to {sensor_details_filename}")
print(f"Data saved to {maintenance_details_filename}")
print(f"Data saved to {maintenance_schedule_details_filename}")
print(f"Data saved to {device_operation_details_filename}")

===============================================================================================

MaintenanceID

StartTimestamp

MaintenanceType

DeviceId

TechnicianID

Status

Duration

Cost

Location

Description

PartsUsed

NextScheduledMaintenance

AdditionalDetails

PartsReplaced

PartsRepaired

MaintenanceOutcome

ErrorCodes

PriorityLevel

devicedetails-
 

DeviceID INT NOT NULL PRIMARY KEY,

 DeviceName NVARCHAR(50),

 Latitude DECIMAL(9,6),

 Longitude DECIMAL(9,6),

 DeviceType NVARCHAR(50),

 MeasuringValue FLOAT,

 MeasuringUnit NVARCHAR(10),

 Status NVARCHAR(20),

 Manufacturer NVARCHAR(30),

 Model NVARCHAR(25),

 FrimwareVersion NVARCHAR(25),

 InstallationDate DATETIME,

 Last_maintenance_date DATETIME,

 AdditionalDetails NVARCHAR(100),

 CreatedDateTime DATETIME,

 ModifiedDateTime DATETIME,

 CreatedBy NVARCHAR(50),

 ModifiedBy NVARCHAR(50),

 IsActive BIT,

devicedetails-

PartID INT NOT NULL PRIMARY KEY,

 PartName NVARCHAR(25),

 PartType NVARCHAR(25),

 Manufacturer NVARCHAR(30),

 ModelNumber NVARCHAR(25),

 SerialNumber NVARCHAR(25),

 InstallationDate DATETIME,

 WarrantyExpiryDate DATETIME,

 Status NVARCHAR(15),

 Location NVARCHAR(50),

 MaintainenaceHistory NVARCHAR(MAX),

 Cost DECIMAL(10,2),

 Supplier NVARCHAR(30),

 AdditionalDetails NVARCHAR(1000),

 CreatedDateTime DATETIME,

 ModifiedDateTime DATETIME,

 CreatedBy NVARCHAR(50),

 ModifiedBy NVARCHAR(50),

 IsActive BIT,

 DeviceID INT FOREIGN KEY REFERENCES DeviceDetails(DeviceID))

sensordetails

SensorID INT NOT NULL PRIMARY KEY,

 SensorName NVARCHAR(100),

 SensorType NVARCHAR(25),

 Manufacturer NVARCHAR(30),

 ModelNumber NVARCHAR(25),

 SerialNumber NVARCHAR(25),

 InstallationDate DATETIME,

 CalibrationDate DATETIME,

 Status NVARCHAR(15),

 Location NVARCHAR(50),

 MeasurementRange NVARCHAR(15),

 Acccuracy NVARCHAR(25),

 Resolution NVARCHAR(25),

 DataFrequency NVARCHAR(25),

 PowerSource NVARCHAR(25)

 CommunicationProtocol NVARCHAR(50),

 Cost DECIMAL(10,2),

 Supplier NVARCHAR(30),

 AdditionalDetails NVARCHAR(1000),

 CreatedDateTime DATETIME,

 ModifiedDateTime DATETIME,

 CreatedBy NVARCHAR(50),

 ModifiedBy NVARCHAR(50),

 IsActive BIT,

 DeviceID INT FOREIGN KEY REFERENCES DeviceDetails(DeviceID))

sensordetails-

SensorID INT NOT NULL PRIMARY KEY,

 SensorName NVARCHAR(100),

 SensorType NVARCHAR(25),

 Manufacturer NVARCHAR(30),

 ModelNumber NVARCHAR(25),

 SerialNumber NVARCHAR(25),

 InstallationDate DATETIME,

 CalibrationDate DATETIME,

 Status NVARCHAR(15),

 Location NVARCHAR(50),

 MeasurementRange NVARCHAR(15),

 Acccuracy NVARCHAR(25),

 Resolution NVARCHAR(25),

 DataFrequency NVARCHAR(25),

 PowerSource NVARCHAR(25)

 CommunicationProtocol NVARCHAR(50),

 Cost DECIMAL(10,2),

 Supplier NVARCHAR(30),

 AdditionalDetails NVARCHAR(1000),

 CreatedDateTime DATETIME,

 ModifiedDateTime DATETIME,

 CreatedBy NVARCHAR(50),

 ModifiedBy NVARCHAR(50),

 IsActive BIT,

 DeviceID INT FOREIGN KEY REFERENCES DeviceDetails(DeviceID))

MaintenanceDetails(



 MaintenanceID INT NOT NULL PRIMARY KEY,

 StartTimeStamp DATETIME,

 MaintenanceType NVARCHAR(25),

 TechnicianID INT NOT NULL,

 Status NVARCHAR(15),

 Duration NVARCHAR(25),

 Cost DECIMAL(10,2),

 Location NVARCHAR(50),

 Description NVARCHAR(1000),

 PartsUsed NVARCHAR(50),

 NextScheduledMaintenance DATETIME,

 AdditionalDetails NVARCHAR(1000),

 PartsReplaced NVARCHAR(50),

 PartsRepaired NVARCHAR(50),

 MaintenanceOutCome NVARCHAR(100),

 ErrorCodes NVARCHAR(50),

 PriorityLevel NVARCHAR(15),

 CreatedDateTime DATETIME,

 ModifiedDateTime DATETIME,

 CreatedBy NVARCHAR(50),

 ModifiedBy NVARCHAR(50),

 IsActive BIT,

 DeviceID INT FOREIGN KEY REFERENCES DeviceDetails(DeviceID))

 

MaintenanceScheduleDetails(

 ScheduleID INT NOT NULL PRIMARY KEY,

 ScheduledDate DATETIME,

 MaintenaceType NVARCHAR(25),

 TechnicianID INT NOT NULL,

 Status NVARCHAR(15),

 Duration NVARCHAR(25),

 Priority NVARCHAR(15),

 Location NVARCHAR(50),

 Description NVARCHAR(1000),

 PartsRequired NVARCHAR(50),

 Comments NVARCHAR(1000),

 AdditionalDetails NVARCHAR(1000),

 CreatedBy NVARCHAR(50),

 CreatedTimeStamp DATETIME,

 ModifiedBy NVARCHAR(50),

 ModifiedTimestamp DATETIME,

 IsActive BIT,

 DeviceID INT FOREIGN KEY REFERENCES DeviceDetails(DeviceID))

 

DeviceOperationDetails(

 OperationID INT NOT NULL PRIMARY KEY,

 Timestamp DATETIME,

 Health nvarchar(50),

 BatteryLevel NVACHAR(25),

 SignalStrength NVARCHAR(25),

 LastCommunication NVARCHAR(50),

 FirmwareVersion NVARCHAR(50),

    Location NVARCHAR(50),

 Temperature NVARCHAR(25),

 ErrorCodes NVARCHAR(50),

 Uptime NVARCHAR(25),

 AdditionalDetails NVARCHAR(1000),

 CreatedDateTime DATETIME,

 ModifiedDateTime DATETIME,

 CreatedBy NVARCHAR(50),

 ModifiedBy NVARCHAR(50),

 IsActive BIT,

 DeviceID INT FOREIGN KEY REFERENCES DeviceDetails(DeviceID))


============rest-----------------------

EventDetails(
	EventID INT NOT NULL PRIMARY KEY,
	Timestamp DATETIME,
	EventType NVARCHAR(15),
	Source NVARCHAR(20),
	Severity NVARCHAR(25),
	Status NVARCHAR(15),
	Description NVARCHAR(1000),
	Location NVARCHAR(50),
	AcknowledgedBy NVARCHAR(50),
	AcknowledgedTimestamp DATETIME,
	ResolutionDetails NVARCHAR(100),
	ResolutionTimestamp DATETIME,
	AdditionalDetails NVARCHAR(1000),
	CreatedDateTime DATETIME,
	ModifiedDateTime DATETIME,
	CreatedBy NVARCHAR(50),
	ModifiedBy NVARCHAR(50),
	IsActive BIT,
	DeviceID INT FOREIGN KEY REFERENCES DeviceDetails(DeviceID))
---------------------------------------------------------------------
--NotificationDetails
Create Table NotificationDetails(
	NotificationID INT NOT NULL PRIMARY KEY,
	Timestamp DATETIME,
	Message NVARCHAR(1000),
	Severity NVARCHAR(50),
	Source NVARCHAR(50),
	Status NVARCHAR(15),
	Category NVARCHAR(25),
	AdditionalDetails NVARCHAR(1000),
	Location NVARCHAR(50),
	AcknowledgedBy NVARCHAR(50),
	AcknowledgedTimestamp DATETIME,
	ResolutionDetails NVARCHAR(100),
	ResoultionTimestamp DATETIME,
	CorrelationID INT NOT NULL,
	NotificationType NVARCHAR(100),
	CreatedDateTime DATETIME,
	ModifiedDateTime DATETIME,
	CreatedBy NVARCHAR(50),
	ModifiedBy NVARCHAR(50),
	IsActive BIT,
	DeviceID INT FOREIGN KEY REFERENCES DeviceDetails(DeviceID))
-------------------------------------------------------------
--UserRoleDetails
CREATE TABLE UserRoleDetails(
	RoleID INT NOT NULL PRIMARY KEY,
	RoleName NVARCHAR(50),
	Description NVARCHAR(100),
	Permission NVARCHAR(100),
	CreatedBy NVARCHAR(50),
	CreatedTimestamp DATETIME,
	ModifiedBy NVARCHAR(50),
	ModifiedTimestamp DATETIME,
	Status NVARCHAR(15),
	AdditionalDetails NVARCHAR(1000),
	CreatedDateTime DATETIME,
	ModifiedDateTime DATETIME,
	CreatedBy NVARCHAR(50),
	ModifiedBy NVARCHAR(50),
	IsActive BIT)
------------------------------------------------
--UserDetails
CREATE TABLE UserDetails(
	UserID INT NOT NULL PRIMARY KEY,
	UserName NVARCHAR(25),
	FullName NVARCHAR(50),
	Email NVARCHAR(100),
	Status NVARCHAR(15),
	CreationDate DATETIME
	PhoneNumber NVARCHAR(10)
	Address NVARCHAR(150),
	Preferences NVARCHAR(50),
	CountryCode NVARCHAR(15)
	CreatedDateTime DATETIME,
	ModifiedDateTime DATETIME,
	CreatedBy NVARCHAR(50),
	ModifiedBy NVARCHAR(50),
	IsActive BIT,
	RoleID INT FOREIGN KEY REFERENCES UserRoleDetails(RoleID))
-------------------------------------------------
--DevicesOn-boarding
CREATE TABLE DeviceManagement(
	DeviceManagementID INT NOT NULL PRIMARY KEY,
	DeviceCount INT,
	DeviceGroup NVARCHAR(50),
	DeviceStatus NVARCHAR(15),
	InstallationDate DATETIME,
	DecomissiongDate DATETIME,
	Location NVARCHAR(50),
	OperationalState NVARCHAR(25),
	EncryptionSatus NVARCHAR(15),
	CreatedDateTime DATETIME,
	ModifiedDateTime DATETIME,
	CreatedBy NVARCHAR(50),
	ModifiedBy NVARCHAR(50),
	IsActive BIT,
	DeviceID INT FOREIGN KEY REFERENCES DeviceDetails(DeviceID))
------------------------------------------------
--ServiceProvider
CREATE TABLE ServiceProvider(
	ServiceProviderID INT NOT NULL PRIMARY KEY,
	ServiceProviderName NVARCHAR(50),
	CustomTag  NVARCHAR(25),
	ServiceLevelAgreement NVARCHAR(100),
	ComplaianceCertificate NVARCHAR(15),
	SecurityFeature NVARCHAR(20),
	BillingModel NVARCHAR(25),
	Location NVARCHAR(50),
	ContactPerson NVARCHAR(25),
	PhoneNumber NVARCHAR(10),
	emailAddress WebSite NVARCHAR(25),
	CreatedDateTime DATETIME,
	ModifiedDateTime DATETIME,
	CreatedBy NVARCHAR(50),
	ModifiedBy NVARCHAR(50),
	IsActive BIT,
	DeviceMangementID INT FOREIGN KEY REFERENCES DeviceMangement(DeviceMangementID))
---------------------------------------------------
--Features
CREATE TABLE Features(
	FeaturesID INT NOT NULL PRIMARY KEY,
	DeviceManagement NVARCHAR(50),
	DataAnalytics NVARCHAR(50),
	CloudService NVARCHAR(50),
	Application NVARCHAR(50),
	OtherIntegration NVARCHAR(50),
	CreatedDateTime DATETIME,
	ModifiedDateTime DATETIME,
	CreatedBy NVARCHAR(50),
	ModifiedBy NVARCHAR(50),
	IsActive BIT,
	ServiceProviderID INT FOREIGN KEY REFERENCES ServiceProvider(ServiceProviderID))
 
---------------------------------------------
UsageDetails
CREATE TABLE UsageDetails(
	UsageID INT NOT NULL PRIMARY KEY,
	UsageDate DATETIME,
	UsageType NVARCHAR(15),
	UsageAmount NVARCHAR(200),
	UnitOfMeasure NVARCHAR(50),
	ServiceName NVARCHAR(25),
	Cost NVARCHAR(50),
	Currency NVARCHAR(50),
	Region NVARCHAR(25),
	AdditionalDetails NVARCHAR(1000),
	CreatedDateTime DATETIME,
	ModifiedDateTime DATETIME,
	CreatedBy NVARCHAR(50),
	ModifiedBy NVARCHAR(50),
	IsActive BIT,
	FeaturesID INT FOREIGN KEY REFERENCES Features(FeaturesID))
 
-------------------------------------------------
--ActivityDetails
CREATE TABLE ActivityDetails(
	ActivityID INT NOT NULL PRIMARY KEY,
	StartTimestamp DATETIME,
	EndTimestamp DATETIME,
	ActivityType NVARCHAR(50),
	Source NVARCHAR(50),
	Status NVARCHAR(15),
	Duration NVARCHAR(25),
	Location NVARCHAR(15),
	AdditionalDetails NVARCHAR(1000),
	ErrorDetails NVARCHAR(50),
	CreatedDateTime DATETIME,
	ModifiedDateTime DATETIME,
	CreatedBy NVARCHAR(50),
	ModifiedBy NVARCHAR(50),
	IsActive BIT,
	DeviceID INT FOREIGN KEY REFERENCES DeviceDetails(DeviceID),
)
----------------------------------------------------------------------------
--Billing
CREATE TABLE BillingDetails(
	BillingID INT NOT NULL PRIMARY KEY,
	BillingDate DATETIME,
	Amount NVARCHAR(100),
	Currency NVARCHAR(25),
	Billing_period_start DATETIME,
	Billing_period_end DATETIME,
	Payment_status NVARCHAR(15),
	Payment_method NVARCHAR(50),
	Invoice_number NVARCHAR(50),
	Discounts NVARCHAR(50),
	AdditionalDetails NVARCHAR(1000),
	CreatedDateTime DATETIME,
	ModifiedDateTime DATETIME,
	CreatedBy NVARCHAR(50),
	ModifiedBy NVARCHAR(50),
	IsActive BIT,
	UsageID INT FOREIGN KEY REFERENCES UsageDetails(UsageID))
 
----------------------------------------------------------------
--CostDetails
CREATE TABLE CostDetails(
	CostDetailID INT NOT NULL PRIMARY KEY,
	ResourceName NVARCHAR(50),
	ResourceType NVARCHAR(25),
	UsageQuantity NVARCHAR(15),
	CostAmount NVARCHAR(20),
	ServiceName NVARCHAR(50),
	CostCategory NVARCHAR(25),
	CostOptimizationFlag BIT,
	TotalCost NVARCHAR(100),
	AdditionalDetails NVARCHAR(1000),
	CreatedDateTime DATETIME,
	ModifiedDateTime DATETIME,
	CreatedBy NVARCHAR(50),
	ModifiedBy NVARCHAR(50),
	IsActive BIT,
	DeviceID INT FOREIGN KEY REFERENCES DeviceDetails(DeviceID),
	BillingID INT FOREIGN KEY REFERENCES BillingDetails(BillingID))




=========================================================================================================================
===========================================================================================================================






































































import pandas as pd
from faker import Faker
import random
from datetime import datetime, timedelta
import os

# Initialize Faker
fake = Faker()

# Function to create synthetic data for EventDetails
def create_event_details(num_entries, num_devices):
    data = []
    for _ in range(num_entries):
        event_id = _  # Assuming EventID is sequential
        timestamp = fake.date_time_this_decade()
        event_type = random.choice(['Alert', 'Warning', 'Info'])[:15]  # Max 15 chars
        source = fake.word()[:20]  # Max 20 chars
        severity = random.choice(['Low', 'Medium', 'High'])[:25]  # Max 25 chars
        status = random.choice(['Acknowledged', 'Unacknowledged'])[:15]  # Max 15 chars
        description = fake.text(max_nb_chars=500)[:999]  # Max 999 chars
        location = fake.city()[:50]  # Max 50 chars
        acknowledged_by = fake.name()[:50]  # Max 50 chars
        acknowledged_timestamp = fake.date_time_this_decade()
        resolution_details = fake.text(max_nb_chars=200)[:100]  # Max 100 chars
        resolution_timestamp = fake.date_time_this_decade()
        additional_details = fake.text(max_nb_chars=500)[:999]  # Max 999 chars
        created_datetime = datetime.now()
        modified_datetime = created_datetime
        created_by = fake.name()[:50]  # Max 50 chars
        modified_by = fake.name()[:50]  # Max 50 chars
        is_active = random.choice([True, False])
        device_id = random.randint(1, num_devices)

        # Append the synthetic entry to the data list
        data.append([
            event_id, timestamp, event_type, source, severity, status,
            description, location, acknowledged_by, acknowledged_timestamp,
            resolution_details, resolution_timestamp, additional_details,
            created_datetime, modified_datetime, created_by, modified_by,
            is_active, device_id
        ])

    columns = [
        "EventID", "Timestamp", "EventType", "Source", "Severity", "Status",
        "Description", "Location", "AcknowledgedBy", "AcknowledgedTimestamp",
        "ResolutionDetails", "ResolutionTimestamp", "AdditionalDetails",
        "CreatedDateTime", "ModifiedDateTime", "CreatedBy", "ModifiedBy",
        "IsActive", "DeviceID"
    ]
    
    return pd.DataFrame(data, columns=columns)

# Function to create synthetic data for NotificationDetails
def create_notification_details(num_entries, num_devices):
    data = []
    for _ in range(num_entries):
        notification_id = _  # Assuming NotificationID is sequential
        timestamp = fake.date_time_this_decade()
        message = fake.text(max_nb_chars=500)[:999]  # Max 999 chars
        severity = random.choice(['Info', 'Warning', 'Critical'])[:50]  # Max 50 chars
        source = fake.word()[:50]  # Max 50 chars
        status = random.choice(['Sent', 'Failed', 'Acknowledged'])[:15]  # Max 15 chars
        category = random.choice(['System', 'User', 'Alert'])[:25]  # Max 25 chars
        additional_details = fake.text(max_nb_chars=500)[:999]  # Max 999 chars
        location = fake.city()[:50]  # Max 50 chars
        acknowledged_by = fake.name()[:50]  # Max 50 chars
        acknowledged_timestamp = fake.date_time_this_decade()
        resolution_details = fake.text(max_nb_chars=200)[:100]  # Max 100 chars
        resolution_timestamp = fake.date_time_this_decade()
        correlation_id = random.randint(1, 1000)  # Random correlation ID
        notification_type = random.choice(['Email', 'SMS', 'Push'])[:100]  # Max 100 chars
        created_datetime = datetime.now()
        modified_datetime = created_datetime
        created_by = fake.name()[:50]  # Max 50 chars
        modified_by = fake.name()[:50]  # Max 50 chars
        is_active = random.choice([True, False])
        device_id = random.randint(1, num_devices)

        # Append the synthetic entry to the data list
        data.append([
            notification_id, timestamp, message, severity, source, status,
            category, additional_details, location, acknowledged_by,
            acknowledged_timestamp, resolution_details, resolution_timestamp,
            correlation_id, notification_type, created_datetime, modified_datetime,
            created_by, modified_by, is_active, device_id
        ])

    columns = [
        "NotificationID", "Timestamp", "Message", "Severity", "Source", "Status",
        "Category", "AdditionalDetails", "Location", "AcknowledgedBy",
        "AcknowledgedTimestamp", "ResolutionDetails", "ResolutionTimestamp",
        "CorrelationID", "NotificationType", "CreatedDateTime", "ModifiedDateTime",
        "CreatedBy", "ModifiedBy", "IsActive", "DeviceID"
    ]
    
    return pd.DataFrame(data, columns=columns)

# Function to create synthetic data for UserRoleDetails
def create_user_role_details(num_entries):
    data = []
    for _ in range(num_entries):
        role_id = _  # Assuming RoleID is sequential
        role_name = random.choice(['Admin', 'User', 'Viewer'])[:50]  # Max 50 chars
        description = fake.text(max_nb_chars=200)[:100]  # Max 100 chars
        permission = fake.text(max_nb_chars=200)[:100]  # Max 100 chars
        created_by = fake.name()[:50]  # Max 50 chars
        created_timestamp = datetime.now()
        modified_by = fake.name()[:50]  # Max 50 chars
        modified_timestamp = created_timestamp
        status = random.choice(['Active', 'Inactive'])[:15]  # Max 15 chars
        additional_details = fake.text(max_nb_chars=500)[:999]  # Max 999 chars
        created_datetime = datetime.now()
        modified_datetime = created_datetime
        is_active = random.choice([True, False])

        # Append the synthetic entry to the data list
        data.append([
            role_id, role_name, description, permission,
            created_by, created_timestamp, modified_by, modified_timestamp,
            status, additional_details, created_datetime, modified_datetime,
            created_by, modified_by, is_active
        ])

    columns = [
        "RoleID", "RoleName", "Description", "Permission",
        "CreatedBy", "CreatedTimestamp", "ModifiedBy", "ModifiedTimestamp",
        "Status", "AdditionalDetails", "CreatedDateTime", "ModifiedDateTime",
        "CreatedBy", "ModifiedBy", "IsActive"
    ]
    
    return pd.DataFrame(data, columns=columns)

# Function to create synthetic data for UserDetails
def create_user_details(num_entries, num_roles):
    data = []
    for _ in range(num_entries):
        user_id = _  # Assuming UserID is sequential
        user_name = fake.user_name()[:25]  # Max 25 chars
        full_name = fake.name()[:50]  # Max 50 chars
        email = fake.email()[:100]  # Max 100 chars
        status = random.choice(['Active', 'Inactive'])[:15]  # Max 15 chars
        creation_date = datetime.now()
        phone_number = fake.phone_number()[:10]  # Max 10 chars
        address = fake.address()[:150]  # Max 150 chars
        preferences = fake.word()[:50]  # Max 50 chars
        country_code = fake.country_code()[:15]  # Max 15 chars
        created_datetime = datetime.now()
        modified_datetime = created_datetime
        created_by = fake.name()[:50]  # Max 50 chars
        modified_by = fake.name()[:50]  # Max 50 chars
        is_active = random.choice([True, False])
        role_id = random.randint(1, num_roles)  # Random RoleID

        # Append the synthetic entry to the data list
        data.append([
            user_id, user_name, full_name, email, status,
            creation_date, phone_number, address, preferences,
            country_code, created_datetime, modified_datetime,
            created_by, modified_by, is_active, role_id
        ])

    columns = [
        "UserID", "UserName", "FullName", "Email", "Status",
        "CreationDate", "PhoneNumber", "Address", "Preferences",
        "CountryCode", "CreatedDateTime", "ModifiedDateTime",
        "CreatedBy", "ModifiedBy", "IsActive", "RoleID"
    ]
    
    return pd.DataFrame(data, columns=columns)

# Function to create synthetic data for DevicesOnboarding
def create_devices_onboarding(num_entries, num_devices):
    data = []
    for _ in range(num_entries):
        device_management_id = _  # Assuming DeviceManagementID is sequential
        device_count = random.randint(1, 100)  # Random device count
        device_group = fake.word()[:50]  # Max 50 chars
        device_status = random.choice(['Active', 'Inactive', 'Decommissioned'])[:15]  # Max 15 chars
        installation_date = fake.date_time_this_decade()
        decommissioning_date = installation_date + timedelta(days=random.randint(30, 365))  # Random decommissioning date
        location = fake.city()[:50]  # Max 50 chars
        operational_state = random.choice(['Operational', 'Non-Operational'])[:25]  # Max 25 chars
        encryption_status = random.choice(['Enabled', 'Disabled'])[:15]  # Max 15 chars
        created_datetime = datetime.now()
        modified_datetime = created_datetime
        created_by = fake.name()[:50]  # Max 50 chars
        modified_by = fake.name()[:50]  # Max 50 chars
        is_active = random.choice([True, False])
        device_id = random.randint(1, num_devices)  # Random DeviceID

        # Append the synthetic entry to the data list
        data.append([
            device_management_id, device_count, device_group, device_status,
            installation_date, decommissioning_date, location, operational_state,
            encryption_status, created_datetime, modified_datetime,
            created_by, modified_by, is_active, device_id
        ])

    columns = [
        "DeviceManagementID", "DeviceCount", "DeviceGroup", "DeviceStatus",
        "InstallationDate", "DecommissioningDate", "Location", "OperationalState",
        "EncryptionStatus", "CreatedDateTime", "ModifiedDateTime", "CreatedBy",
        "ModifiedBy", "IsActive", "DeviceID"
    ]
    
    return pd.DataFrame(data, columns=columns)

# Function to create synthetic data for ServiceProvider
def create_service_provider(num_entries):
    data = []
    for _ in range(num_entries):
        service_provider_id = _  # Assuming ServiceProviderID is sequential
        service_provider_name = fake.company()[:50]  # Max 50 chars
        custom_tag = fake.word()[:25]  # Max 25 chars
        service_level_agreement = fake.text(max_nb_chars=200)[:100]  # Max 100 chars
        compliance_certificate = random.choice(['Yes', 'No'])[:15]  # Max 15 chars
        security_feature = random.choice(['Basic', 'Advanced'])[:20]  # Max 20 chars
        billing_model = random.choice(['Monthly', 'Yearly'])[:25]  # Max 25 chars
        location = fake.city()[:50]  # Max 50 chars
        contact_person = fake.name()[:25]  # Max 25 chars
        phone_number = fake.phone_number()[:10]  # Max 10 chars
        email_address = fake.email()[:25]  # Max 25 chars
        created_datetime = datetime.now()
        modified_datetime = created_datetime
        created_by = fake.name()[:50]  # Max 50 chars
        modified_by = fake.name()[:50]  # Max 50 chars
        is_active = random.choice([True, False])

        # Append the synthetic entry to the data list
        data.append([
            service_provider_id, service_provider_name, custom_tag,
            service_level_agreement, compliance_certificate, security_feature,
            billing_model, location, contact_person, phone_number,
            email_address, created_datetime, modified_datetime,
            created_by, modified_by, is_active
        ])

    columns = [
        "ServiceProviderID", "ServiceProviderName", "CustomTag", "ServiceLevelAgreement",
        "ComplianceCertificate", "SecurityFeature", "BillingModel", "Location",
        "ContactPerson", "PhoneNumber", "EmailAddress", "CreatedDateTime",
        "ModifiedDateTime", "CreatedBy", "ModifiedBy", "IsActive"
    ]
    
    return pd.DataFrame(data, columns=columns)

# Function to create synthetic data for Features
def create_features(num_entries, num_service_providers):
    data = []
    for _ in range(num_entries):
        features_id = _  # Assuming FeaturesID is sequential
        device_management = fake.word()[:50]  # Max 50 chars
        data_analytics = fake.word()[:50]  # Max 50 chars
        cloud_service = fake.word()[:50]  # Max 50 chars
        application = fake.word()[:50]  # Max 50 chars
        other_integration = fake.word()[:50]  # Max 50 chars
        created_datetime = datetime.now()
        modified_datetime = created_datetime
        created_by = fake.name()[:50]  # Max 50 chars
        modified_by = fake.name()[:50]  # Max 50 chars
        is_active = random.choice([True, False])
        service_provider_id = random.randint(1, num_service_providers)  # Random ServiceProviderID

        # Append the synthetic entry to the data list
        data.append([
            features_id, device_management, data_analytics, cloud_service,
            application, other_integration, created_datetime, modified_datetime,
            created_by, modified_by, is_active, service_provider_id
        ])

    columns = [
        "FeaturesID", "DeviceManagement", "DataAnalytics", "CloudService",
        "Application", "OtherIntegration", "CreatedDateTime", "ModifiedDateTime",
        "CreatedBy", "ModifiedBy", "IsActive", "ServiceProviderID"
    ]
    
    return pd.DataFrame(data, columns=columns)

# Function to create synthetic data for UsageDetails
def create_usage_details(num_entries, num_features):
    data = []
    for _ in range(num_entries):
        usage_id = _  # Assuming UsageID is sequential
        usage_date = fake.date_time_this_decade()
        usage_type = random.choice(['API', 'Web', 'Mobile'])[:15]  # Max 15 chars
        usage_amount = f"{random.randint(1, 1000)} units"  # Random usage amount
        unit_of_measure = random.choice(['GB', 'MB', 'Requests'])[:50]  # Max 50 chars
        service_name = fake.word()[:25]  # Max 25 chars
        cost = f"${random.uniform(1, 100)}"  # Random cost
        currency = random.choice(['USD', 'EUR', 'GBP'])[:50]  # Max 50 chars
        region = fake.country()[:25]  # Max 25 chars
        additional_details = fake.text(max_nb_chars=500)[:999]  # Max 999 chars
        created_datetime = datetime.now()
        modified_datetime = created_datetime
        created_by = fake.name()[:50]  # Max 50 chars
        modified_by = fake.name()[:50]  # Max 50 chars
        is_active = random.choice([True, False])
        features_id = random.randint(1, num_features)  # Random FeaturesID

        # Append the synthetic entry to the data list
        data.append([
            usage_id, usage_date, usage_type, usage_amount,
            unit_of_measure, service_name, cost, currency,
            region, additional_details, created_datetime, modified_datetime,
            created_by, modified_by, is_active, features_id
        ])

    columns = [
        "UsageID", "UsageDate", "UsageType", "UsageAmount",
        "UnitOfMeasure", "ServiceName", "Cost", "Currency",
        "Region", "AdditionalDetails", "CreatedDateTime", "ModifiedDateTime",
        "CreatedBy", "ModifiedBy", "IsActive", "FeaturesID"
    ]
    
    return pd.DataFrame(data, columns=columns)

# Function to create synthetic data for ActivityDetails
def create_activity_details(num_entries, num_devices):
    data = []
    for _ in range(num_entries):
        activity_id = _  # Assuming ActivityID is sequential
        start_timestamp = fake.date_time_this_decade()
        end_timestamp = start_timestamp + timedelta(hours=random.randint(1, 5))  # Random end time
        activity_type = random.choice(['Login', 'Data Processing', 'Error Handling'])[:50]  # Max 50 chars
        source = fake.word()[:50]  # Max 50 chars
        status = random.choice(['Completed', 'Failed', 'In Progress'])[:15]  # Max 15 chars
        duration = f"{(end_timestamp - start_timestamp).seconds // 60} minutes"  # Random duration
        location = fake.city()[:15]  # Max 15 chars
        additional_details = fake.text(max_nb_chars=500)[:999]  # Max 999 chars
        error_details = fake.word()[:50]  # Max 50 chars
        created_datetime = datetime.now()
        modified_datetime = created_datetime
        created_by = fake.name()[:50]  # Max 50 chars
        modified_by = fake.name()[:50]  # Max 50 chars
        is_active = random.choice([True, False])
        device_id = random.randint(1, num_devices)  # Random DeviceID

        # Append the synthetic entry to the data list
        data.append([
            activity_id, start_timestamp, end_timestamp, activity_type,
            source, status, duration, location, additional_details,
            error_details, created_datetime, modified_datetime,
            created_by, modified_by, is_active, device_id
        ])

    columns = [
        "ActivityID", "StartTimestamp", "EndTimestamp", "ActivityType",
        "Source", "Status", "Duration", "Location", "AdditionalDetails",
        "ErrorDetails", "CreatedDateTime", "ModifiedDateTime",
        "CreatedBy", "ModifiedBy", "IsActive", "DeviceID"
    ]
    
    return pd.DataFrame(data, columns=columns)

# Function to create synthetic data for BillingDetails
def create_billing_details(num_entries, num_usage):
    data = []
    for _ in range(num_entries):
        billing_id = _  # Assuming BillingID is sequential
        billing_date = fake.date_time_this_decade()
        amount = f"${random.uniform(10, 500)}"  # Random amount
        currency = random.choice(['USD', 'EUR', 'GBP'])[:25]  # Max 25 chars
        billing_period_start = billing_date - timedelta(days=random.randint(1, 30))
        billing_period_end = billing_date
        payment_status = random.choice(['Paid', 'Pending', 'Failed'])[:15]  # Max 15 chars
        payment_method = random.choice(['Credit Card', 'PayPal', 'Bank Transfer'])[:50]  # Max 50 chars
        invoice_number = fake.uuid4()[:50]  # Max 50 chars
        discounts = f"{random.uniform(0, 100):.2f}%"  # Random discount
        additional_details = fake.text(max_nb_chars=500)[:999]  # Max 999 chars
        created_datetime = datetime.now()
        modified_datetime = created_datetime
        created_by = fake.name()[:50]  # Max 50 chars
        modified_by = fake.name()[:50]  # Max 50 chars
        is_active = random.choice([True, False])
        usage_id = random.randint(1, num_usage)  # Random UsageID

        # Append the synthetic entry to the data list
        data.append([
            billing_id, billing_date, amount, currency,
            billing_period_start, billing_period_end, payment_status,
            payment_method, invoice_number, discounts, additional_details,
            created_datetime, modified_datetime, created_by, modified_by,
            is_active, usage_id
        ])

    columns = [
        "BillingID", "BillingDate", "Amount", "Currency",
        "BillingPeriodStart", "BillingPeriodEnd", "PaymentStatus",
        "PaymentMethod", "InvoiceNumber", "Discounts", "AdditionalDetails",
        "CreatedDateTime", "ModifiedDateTime", "CreatedBy", "ModifiedBy",
        "IsActive", "UsageID"
    ]
    
    return pd.DataFrame(data, columns=columns)

# Function to create synthetic data for CostDetails
def create_cost_details(num_entries, num_devices, num_billing):
    data = []
    for _ in range(num_entries):
        cost_detail_id = _  # Assuming CostDetailID is sequential
        resource_name = fake.word()[:50]  # Max 50 chars
        resource_type = random.choice(['Compute', 'Storage', 'Network'])[:25]  # Max 25 chars
        usage_quantity = f"{random.randint(1, 100)} units"  # Random usage quantity
        cost_amount = f"${random.uniform(1, 500)}"  # Random cost amount
        service_name = fake.word()[:50]  # Max 50 chars
        cost_category = random.choice(['Fixed', 'Variable'])[:25]  # Max 25 chars
        cost_optimization_flag = random.choice([True, False])
        total_cost = f"${random.uniform(10, 1000)}"  # Random total cost
        additional_details = fake.text(max_nb_chars=500)[:999]  # Max 999 chars
        created_datetime = datetime.now()
        modified_datetime = created_datetime
        created_by = fake.name()[:50]  # Max 50 chars
        modified_by = fake.name()[:50]  # Max 50 chars
        is_active = random.choice([True, False])
        device_id = random.randint(1, num_devices)  # Random DeviceID
        billing_id = random.randint(1, num_billing)  # Random BillingID

        # Append the synthetic entry to the data list
        data.append([
            cost_detail_id, resource_name, resource_type, usage_quantity,
            cost_amount, service_name, cost_category, cost_optimization_flag,
            total_cost, additional_details, created_datetime, modified_datetime,
            created_by, modified_by, is_active, device_id, billing_id
        ])

    columns = [
        "CostDetailID", "ResourceName", "ResourceType", "UsageQuantity",
        "CostAmount", "ServiceName", "CostCategory", "CostOptimizationFlag",
        "TotalCost", "AdditionalDetails", "CreatedDateTime", "ModifiedDateTime",
        "CreatedBy", "ModifiedBy", "IsActive", "DeviceID", "BillingID"
    ]
    
    return pd.DataFrame(data, columns=columns)

# Generate synthetic data
num_entries = 1000  # Specify the number of entries you want for each table
num_devices = 10  # Specify how many devices exist in DeviceDetails
num_technicians = 5  # Specify how many technicians exist
num_usage = 1000  # Specify how many usage records exist
num_service_providers = 10  # Specify how many service providers exist
num_roles = 10  # Specify how many user roles exist

# Create data for each table
event_details_data = create_event_details(num_entries, num_devices)
notification_details_data = create_notification_details(num_entries, num_devices)
user_role_details_data = create_user_role_details(num_roles)
user_details_data = create_user_details(num_entries, num_roles)
devices_onboarding_data = create_devices_onboarding(num_entries, num_devices)
service_provider_data = create_service_provider(num_service_providers)
features_data = create_features(num_entries, num_service_providers)
usage_details_data = create_usage_details(num_entries, num_service_providers)
activity_details_data = create_activity_details(num_entries, num_devices)
billing_details_data = create_billing_details(num_entries, num_usage)
cost_details_data = create_cost_details(num_entries, num_devices, num_entries)

# Specify the directory where you want to save the files
directory = r"C:\path\to\your\directory"  # Change this to your desired path

# Save to CSV
event_details_filename = os.path.join(directory, f'event_details_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
notification_details_filename = os.path.join(directory, f'notification_details_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
user_role_details_filename = os.path.join(directory, f'user_role_details_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
user_details_filename = os.path.join(directory, f'user_details_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
devices_onboarding_filename = os.path.join(directory, f'devices_onboarding_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
service_provider_filename = os.path.join(directory, f'service_provider_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
features_filename = os.path.join(directory, f'features_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
usage_details_filename = os.path.join(directory, f'usage_details_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
activity_details_filename = os.path.join(directory, f'activity_details_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
billing_details_filename = os.path.join(directory, f'billing_details_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
cost_details_filename = os.path.join(directory, f'cost_details_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')

# Save all dataframes to CSV
event_details_data.to_csv(event_details_filename, index=False)
notification_details_data.to_csv(notification_details_filename, index=False)
user_role_details_data.to_csv(user_role_details_filename, index=False)
user_details_data.to_csv(user_details_filename, index=False)
devices_onboarding_data.to_csv(devices_onboarding_filename, index=False)
service_provider_data.to_csv(service_provider_filename, index=False)
features_data.to_csv(features_filename, index=False)
usage_details_data.to_csv(usage_details_filename, index=False)
activity_details_data.to_csv(activity_details_filename, index=False)
billing_details_data.to_csv(billing_details_filename, index=False)
cost_details_data.to_csv(cost_details_filename, index=False)

# Print confirmation
print(f"Generated {num_entries} records for each table.")
print(f"Data saved to {event_details_filename}")
print(f"Data saved to {notification_details_filename}")
print(f"Data saved to {user_role_details_filename}")
print(f"Data saved to {user_details_filename}")
print(f"Data saved to {devices_onboarding_filename}")
print(f"Data saved to {service_provider_filename}")
print(f"Data saved to {features_filename}")
print(f"Data saved to {usage_details_filename}")
print(f"Data saved to {activity_details_filename}")
print(f"Data saved to {billing_details_filename}")
print(f"Data saved to {cost_details_filename}")


>>>>>>>activitydetails new

import pandas as pd
from faker import Faker
import random
from datetime import datetime, timedelta
import os

# Initialize Faker
fake = Faker()

# Function to create synthetic data for UserDetails
def create_user_details(num_entries):
    data = []
    for _ in range(num_entries):
        user_id = _  # Assuming UserID is sequential
        user_name = fake.user_name()[:25]  # Max 25 chars
        full_name = fake.name()[:50]  # Max 50 chars
        email = fake.email()[:100]  # Max 100 chars
        status = random.choice(['Active', 'Inactive'])[:15]  # Max 15 chars
        creation_date = datetime.now()
        phone_number = fake.phone_number()[:10]  # Max 10 chars
        address = fake.address()[:150]  # Max 150 chars
        preferences = fake.word()[:50]  # Max 50 chars
        country_code = fake.country_code()[:15]  # Max 15 chars
        created_datetime = datetime.now()
        modified_datetime = created_datetime
        created_by = fake.name()[:50]  # Max 50 chars
        modified_by = fake.name()[:50]  # Max 50 chars
        is_active = random.choice([True, False])

        # Append the synthetic entry to the data list
        data.append([
            user_id, user_name, full_name, email, status,
            creation_date, phone_number, address, preferences,
            country_code, created_datetime, modified_datetime,
            created_by, modified_by, is_active
        ])

    columns = [
        "UserID", "UserName", "FullName", "Email", "Status",
        "CreationDate", "PhoneNumber", "Address", "Preferences",
        "CountryCode", "CreatedDateTime", "ModifiedDateTime",
        "CreatedBy", "ModifiedBy", "IsActive"
    ]
    
    return pd.DataFrame(data, columns=columns)

# Function to create synthetic data for UsageDetails
def create_usage_details(num_entries):
    data = []
    for _ in range(num_entries):
        usage_id = _  # Assuming UsageID is sequential
        usage_date = fake.date_time_this_decade()
        usage_type = random.choice(['API', 'Web', 'Mobile'])[:15]  # Max 15 chars
        usage_amount = f"{random.randint(1, 1000)} units"  # Random usage amount
        unit_of_measure = random.choice(['GB', 'MB', 'Requests'])[:50]  # Max 50 chars
        service_name = fake.word()[:25]  # Max 25 chars
        cost = f"${random.uniform(1, 100)}"  # Random cost
        currency = random.choice(['USD', 'EUR', 'GBP'])[:50]  # Max 50 chars
        region = fake.country()[:25]  # Max 25 chars
        additional_details = fake.text(max_nb_chars=500)[:999]  # Max 999 chars
        created_datetime = datetime.now()
        modified_datetime = created_datetime
        created_by = fake.name()[:50]  # Max 50 chars
        modified_by = fake.name()[:50]  # Max 50 chars
        is_active = random.choice([True, False])

        # Append the synthetic entry to the data list
        data.append([
            usage_id, usage_date, usage_type, usage_amount,
            unit_of_measure, service_name, cost, currency,
            region, additional_details, created_datetime, modified_datetime,
            created_by, modified_by, is_active
        ])

    columns = [
        "UsageID", "UsageDate", "UsageType", "UsageAmount",
        "UnitOfMeasure", "ServiceName", "Cost", "Currency",
        "Region", "AdditionalDetails", "CreatedDateTime", "ModifiedDateTime",
        "CreatedBy", "ModifiedBy", "IsActive"
    ]
    
    return pd.DataFrame(data, columns=columns)

# Function to create synthetic data for ActivityDetails
def create_activity_details(num_entries, num_devices, user_ids, usage_ids):
    data = []
    for _ in range(num_entries):
        activity_id = _  # Assuming ActivityID is sequential
        start_timestamp = fake.date_time_this_decade()
        end_timestamp = start_timestamp + timedelta(hours=random.randint(1, 5))  # Random end time
        activity_type = random.choice(['Login', 'Data Processing', 'Error Handling'])[:50]  # Max 50 chars
        source = fake.word()[:50]  # Max 50 chars
        status = random.choice(['Completed', 'Failed', 'In Progress'])[:15]  # Max 15 chars
        duration = f"{(end_timestamp - start_timestamp).seconds // 60} minutes"  # Random duration
        location = fake.city()[:15]  # Max 15 chars
        additional_details = fake.text(max_nb_chars=500)[:999]  # Max 999 chars
        error_details = fake.word()[:50]  # Max 50 chars
        created_datetime = datetime.now()
        modified_datetime = created_datetime
        created_by = fake.name()[:50]  # Max 50 chars
        modified_by = fake.name()[:50]  # Max 50 chars
        is_active = random.choice([True, False])
        device_id = random.randint(1, num_devices)  # Random DeviceID
        user_id = random.choice(user_ids)  # Random UserID from existing users
        usage_id = random.choice(usage_ids)  # Random UsageID from existing usage records

        # Append the synthetic entry to the data list
        data.append([
            activity_id, start_timestamp, end_timestamp, activity_type,
            source, status, duration, location, additional_details,
            error_details, created_datetime, modified_datetime,
            created_by, modified_by, is_active, device_id, user_id, usage_id
        ])

    columns = [
        "ActivityID", "StartTimestamp", "EndTimestamp", "ActivityType",
        "Source", "Status", "Duration", "Location", "AdditionalDetails",
        "ErrorDetails", "CreatedDateTime", "ModifiedDateTime",
        "CreatedBy", "ModifiedBy", "IsActive", "DeviceID", "UserID", "UsageID"
    ]
    
    return pd.DataFrame

===>only for activitydetails
import pandas as pd
from faker import Faker
import random
from datetime import datetime, timedelta

# Initialize Faker
fake = Faker()


# Function to create synthetic data for ActivityDetails
def create_activity_details(num_entries, user_ids, usage_ids):
    data = []
    for _ in range(num_entries):
        activity_id = _  # Assuming ActivityID is sequential
        start_timestamp = fake.date_time_this_decade()
        end_timestamp = start_timestamp + timedelta(hours=random.randint(1, 5))  # Random end time
        activity_type = random.choice(['Login', 'Data Processing', 'Error Handling'])[:50]  # Max 50 chars
        source = fake.word()[:50]  # Max 50 chars
        status = random.choice(['Completed', 'Failed', 'In Progress'])[:15]  # Max 15 chars
        duration = f"{(end_timestamp - start_timestamp).seconds // 60} minutes"  # Random duration
        location = fake.city()[:15]  # Max 15 chars
        additional_details = fake.text(max_nb_chars=500)[:999]  # Max 999 chars
        error_details = fake.word()[:50]  # Max 50 chars
        created_datetime = datetime.now()
        modified_datetime = created_datetime
        created_by = fake.name()[:50]  # Max 50 chars
        modified_by = fake.name()[:50]  # Max 50 chars
        is_active = random.choice([True, False])
        user_id = random.choice(user_ids)  # Random UserID from existing users
        usage_id = random.choice(usage_ids)  # Random UsageID from existing usage records

        # Append the synthetic entry to the data list
        data.append([
            activity_id, start_timestamp, end_timestamp, activity_type,
            source, status, duration, location, additional_details,
            error_details, created_datetime, modified_datetime,
            created_by, modified_by, is_active, user_id, usage_id
        ])

    columns = [
        "ActivityID", "StartTimestamp", "EndTimestamp", "ActivityType",
        "Source", "Status", "Duration", "Location", "AdditionalDetails",
        "ErrorDetails", "CreatedDateTime", "ModifiedDateTime",
        "CreatedBy", "ModifiedBy", "IsActive", "UserID", "UsageID"
    ]
    
    return pd.DataFrame(data, columns=columns)

# Generate synthetic data
num_entries = 1000  # Specify the number of entries you want for ActivityDetails
num_users = 100  # Specify how many users exist
num_usage = 1000  # Specify how many usage records exist


# Create data for ActivityDetails
activity_details_data = create_activity_details(num_entries, user_ids, usage_ids)

# Specify the directory where you want to save the file
directory = r"C:\path\to\your\directory"  # Change this to your desired path

# Save to CSV
activity_details_filename = os.path.join(directory, f'activity_details_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')

# Save the ActivityDetails dataframe to CSV
activity_details_data.to_csv(activity_details_filename, index=False)

# Print confirmation
print(f"Generated {num_entries} records for ActivityDetails.")
print(f"Data saved to {activity_details_filename}")
